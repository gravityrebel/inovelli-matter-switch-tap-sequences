blueprint:
  name: Inovelli Dev
  description: |
    ## Inovelli Dev

    ### This blueprint will create an automation to:

      - Perform predefined actions when a button on an Inovelli switch is tapped or held
      - Bind the Inovelli Switches Light Entity to a Target Light

    ### Light Binding

    Light binding will sync the on/off state and brightness from the Inovelli Switch to a Target Light.

    Adjust the device settings as follows to make transitions more fluid:

      - Slow down the dimming speed on the Inovelli Switch to account for lag
      - Transitions from on to off should be set to 0 for all devices
      - Default on brightness should match for all devices
      - If the target device has a setting for minimum brightness, then leave the blueprint minimum brightness at 1

    Please note, when Minimum Brightness is > 1, the automation will ensure the Target Light never falls below that value, with an adjusted linear scale between the minimum value and 100%. Because of this, the brightness value for each light may not always match.

    ### Supported Models:
      - VTM31-SN
      - VTM35-SN

    Version 0.2
  domain: automation
  author: jay-kub
  homeassistant:
    min_version: 2024.8.0
  input: # This section defines the inputs that appear visually for the user.
    entity_inputs: # This section is for entities related to the switch itself.
      name: Inovelli Switch Entities
      description:
        "Example: the Event Entity for Config can be found here: Settings > Devices & services > Matter > # Devices > *Select
        your device* > Events > Up > Settings Icon > entity_id"
      icon: mdi:devices  
      input:
        entity_up:
          name: Event Entity for Up
          description: The Event Entity for Up taps
          selector:
            entity:
              filter:
                - integration: matter
                  domain: event
                  device_class: button
              multiple: false
        down_event:
          name: Event Entity for Down
          description: The Event Entity for Down taps
          selector:
            entity:
              filter:
                - integration: matter
                  domain: event
                  device_class: button
              multiple: false
        entity_config:
          name: Event Entity for Config
          description: The Event Entity for Config taps
          selector:
            entity:
              filter:
                - integration: matter
                  domain: event
                  device_class: button
              multiple: false
        switch_light:
          name: Light Entity
          description: The light entity for the Inovelli Switch
          selector:
            entity:
              filter:
                - domain: light
                  integration: matter
              multiple: false
    up_inputs: # This section lets the user define the actions when they press "up" n times.
      name: Up
      icon: mdi:arrow-up-thick
      input:
        up1Action:
          name: Single
          description: When Up is pressed 1 time
          default: []
          selector:
            action: {}
        up2Action:
          name: Double
          description: When Up is pressed 2 times
          default: []
          selector:
            action: {}
        up3Action:
          name: Triple
          description: When Up is pressed 3 times
          default: []
          selector:
            action: {}
        up4Action:
          name: Quadruple
          description: When Up is pressed 4 times
          default: []
          selector:
            action: {}
        up5Action:
          name: Quintuple
          description: When Up is pressed 5 times
          default: []
          selector:
            action: {}
        upHeldAction:
          name: Up Held
          description: When Up is held
          default: []
          selector:
            action: {}
        upReleasedAction:
          name: Up Released
          description: When Up is released
          default: []
          selector:
            action: {}
    down_inputs: # This section defines the actions when the user presses down n times
      name: Down
      icon: mdi:arrow-down-thick
      input:
        down1Action:
          name: Single
          description: When Down is pressed 1 time
          default: []
          selector:
            action: {}
        down2Action:
          name: Double
          description: When Down is pressed 2 times
          default: []
          selector:
            action: {}
        down3Action:
          name: Triple
          description: When Down is pressed 3 times
          default: []
          selector:
            action: {}
        down4Action:
          name: Quadruple
          description: When Down is pressed 4 times
          default: []
          selector:
            action: {}
        down5Action:
          name: Quintuple
          description: When Down is pressed 5 times
          default: []
          selector:
            action: {}
        downHeldAction:
          name: Down Held
          description: When Down is held
          default: []
          selector:
            action: {}
        downReleasedAction:
          name: Down Released
          description: When Down is released
          default: []
          selector:
            action: {}
    config_inputs: #This section defines the actions when the user presses config n times
      name: Config
      icon: mdi:button-pointer
      input:
        config1Action:
          name: Single
          description: When Config is pressed 1 time
          default: []
          selector:
            action: {}
        config2Action:
          name: Double
          description: When Config is pressed 2 times
          default: []
          selector:
            action: {}
        config3Action:
          name: Triple
          description: When Config is pressed 3 times
          default: []
          selector:
            action: {}
        config4Action:
          name: Quadruple
          description: When Config is pressed 4 times
          default: []
          selector:
            action: {}
        config5Action:
          name: Quintuple
          description: When Config is pressed 5 times
          default: []
          selector:
            action: {}
        configHeldAction:
          name: Config Held
          description: When Config is held
          default: []
          selector:
            action: {}
        configReleasedAction:
          name: Config Released
          description: When Config is released
          default: []
          selector:
            action: {}
    binding_inputs: # This section defines entities and settings that are bound virtually to the switch
      name: Light Bindings
      icon: mdi:sync
      input:
        target_light:
          name: Target Light
          description: |
            Select the light entity that will be synced to the Inovelli Switch
            Hint: to control multiple lights, create a light group
          default: []
          selector:
            entity:
              filter:
                - domain: light
              multiple: false
        brightness_sync:
          name: Brightness Sync
          description: Sync the brightness from the Inovelli Switch to the Target Light
          default: true
          selector:
            boolean: {}
        min_brightness:
          name: Minimum Brightness
          description: Set the minimum brightness percent for the target light.
          default: 1
          selector:
            number:
              min: 1.0
              max: 100.0
              step: 1.0
              mode: slider
        reverse_sync:
          name: Reverse Sync
          description: If the Target Light is toggled on/off by an outside source, the Inovelli Switch will sync.
          default: false
          selector:
            boolean: {}
  source_url: https://github.com/jay-kub/inovelli-matter-switch-tap-sequences/blob/dev/inovelli-matter-switch-tap-sequences.yaml
mode: queued
max_exceeded: silent
variables:
  reverseSync: !input reverse_sync

trigger:
  - platform: state
    entity_id: !input entity_up
    not_from:
      - unknown
      - unavailable

  - id: down
    platform: state
    entity_id: !input down_event
    not_from:
      - unknown
      - unavailable

  - id: config
    platform: state
    entity_id: !input config_event
    not_from:
      - unknown
      - unavailable

  - id: turnOn
    platform: state
    entity_id: !input switch_light
    from: "off"
    to: "on"

  - id: turnOff
    platform: state
    entity_id: !input switch_light
    from: "on"
    to: "off"

  - id: reverseSyncOff
    platform: state
    entity_id: !input default_light
    from: "on"
    to: "off"

  - id: reverseSyncOn
    platform: state
    entity_id: !input default_light
    from: "off"
    to: "on"
    
  - platform: state
    entity_id: !input switch_light
    attribute: brightness
    id: turnOn

condition: []

# The automation itself. When triggered, this is the main script that will run.
action:
- choose:
  - conditions:
    - condition: trigger
      id:
      - up
    sequence:
    - choose:
      - conditions:
        - condition: state
          entity_id: !input entity_up
          attribute: event_type
          state: multi_press_1
        sequence: !input up1
      - conditions:
        - condition: state
          entity_id: !input entity_up
          attribute: event_type
          state: multi_press_2
        sequence: !input up2
      - conditions:
        - condition: state
          entity_id: !input entity_up
          attribute: event_type
          state: multi_press_3
        sequence: !input up3
      - conditions:
        - condition: state
          entity_id: !input entity_up
          attribute: event_type
          state: multi_press_4
        sequence: !input up4
      - conditions:
        - condition: state
          entity_id: !input entity_up
          attribute: event_type
          state: multi_press_5
        sequence: !input up5
      - conditions:
        - condition: state
          entity_id: !input entity_up
          attribute: event_type
          state: long_press
        sequence: !input upHeld
      - conditions:
        - condition: state
          entity_id: !input entity_up
          attribute: event_type
          state: long_release
        sequence: !input upReleased
  - conditions:
    - condition: trigger
      id:
      - down
    sequence:
    - choose:
      - conditions:
        - condition: state
          entity_id: !input entity_down
          attribute: event_type
          state: multi_press_1
        sequence: !input down1
      - conditions:
        - condition: state
          entity_id: !input entity_down
          attribute: event_type
          state: multi_press_2
        sequence: !input down2
      - conditions:
        - condition: state
          entity_id: !input entity_down
          attribute: event_type
          state: multi_press_3
        sequence: !input down3
      - conditions:
        - condition: state
          entity_id: !input entity_down
          attribute: event_type
          state: multi_press_4
        sequence: !input down4
      - conditions:
        - condition: state
          entity_id: !input entity_down
          attribute: event_type
          state: multi_press_5
        sequence: !input down5
      - conditions:
        - condition: state
          entity_id: !input entity_down
          attribute: event_type
          state: long_press
        sequence: !input downHeld
      - conditions:
        - condition: state
          entity_id: !input entity_down
          attribute: event_type
          state: long_release
        sequence: !input downReleased
  - conditions:
    - condition: trigger
      id:
      - config
    sequence:
    - choose:
      - conditions:
        - condition: state
          entity_id: !input entity_config
          attribute: event_type
          state: multi_press_1
        sequence: !input config1
      - conditions:
        - condition: state
          entity_id: !input entity_config
          attribute: event_type
          state: multi_press_2
        sequence: !input config2
      - conditions:
        - condition: state
          entity_id: !input entity_config
          attribute: event_type
          state: multi_press_3
        sequence: !input config3
      - conditions:
        - condition: state
          entity_id: !input entity_config
          attribute: event_type
          state: multi_press_4
        sequence: !input config4
      - conditions:
        - condition: state
          entity_id: !input entity_config
          attribute: event_type
          state: multi_press_5
        sequence: !input config5
      - conditions:
        - condition: state
          entity_id: !input entity_config
          attribute: event_type
          state: long_press
        sequence: !input configHeld
      - conditions:
        - condition: state
          entity_id: !input entity_config
          attribute: event_type
          state: long_release
        sequence: !input configReleased
  - conditions:
      - condition: trigger
        id:
          - turnOff
    sequence:
    - action: light.turn_off
      metadata: {}
      data: {}
      target:
        entity_id: !input target_light
  - conditions:
      - condition: trigger
        id:
          - reverseSyncOff
          - reverseSyncOn
    sequence:
      - if: '{{ reverseSync }}'
        then:
          - choose:
              - conditions:
                  - condition: trigger
                    id:
                      - reverseSyncOff
                sequence:
                - action: light.turn_off
                  target:
                    entity_id: !input entity_light
                  data: {}
              - conditions:
                  - condition: trigger
                    id:
                      - reverseSyncOn
                sequence:
                - action: light.turn_on
                  target:
                    entity_id: !input entity_light
                  data: {}
  - conditions:
      - condition: trigger
        id:
          - turnOn
    sequence:
    - variables:
        controlLight: !input entity_light
        controlLightBrightness: |
          {{ (state_attr(controlLight, 'brightness') / 2.55) }}
        minBrightness: !input min_brightness
        brightnessValue: |
          {{ (((100 - minBrightness) / 100 ) * controlLightBrightness + minBrightness ) | round(0) }}
        brightnessSync: !input brightness_sync
    - choose:
      - conditions: '{{ brightnessSync }}'
        sequence:
        - action: light.turn_on
          metadata: {}
          data:
            brightness_pct: '{{ brightnessValue }}'
          target:
            entity_id: !input target_light
      - conditions:
        sequence:
        - action: light.turn_on
          metadata: {}
          target:
            entity_id: !input target_light